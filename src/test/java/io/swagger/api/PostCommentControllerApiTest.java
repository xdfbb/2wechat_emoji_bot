/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BaseCommentDTO;
import io.swagger.model.CustomizedPageOfBaseCommentVO;
import io.swagger.model.CustomizedPageOfBaseCommentWithParentVO;
import io.swagger.model.CustomizedPageOfPostCommentWithPostVO;
import io.swagger.model.PostComment;
import io.swagger.model.PostCommentParam;
import io.swagger.model.PostCommentWithPostVO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for PostCommentControllerApi 
 */
public class PostCommentControllerApiTest {


    private PostCommentControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", PostCommentControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Creates a post comment (new or reply)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createByUsingPOST6Test() {
        PostCommentParam body = null;
        //BaseCommentDTO response = api.createByUsingPOST6(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Delete post comments permanently in batch by id array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyInBatchUsingDELETE2Test() {
        //List<PostComment> response = api.deletePermanentlyInBatchUsingDELETE2();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes post comment permanently and recursively
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyUsingDELETE5Test() {
        Long commentId = null;
        //BaseCommentDTO response = api.deletePermanentlyUsingDELETE5(commentId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets a post comment by comment id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByUsingGET6Test() {
        Long commentId = null;
        //PostCommentWithPostVO response = api.getByUsingGET6(commentId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists post comments with tree view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentTreeUsingGET1Test() {
        Integer postId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentVO response = api.listCommentTreeUsingGET1(postId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists post comment with list view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentsUsingGET1Test() {
        Integer postId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentWithParentVO response = api.listCommentsUsingGET1(postId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Pages post latest comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLatestUsingGET1Test() {
        Integer top = null;
        String status = null;
        //List<PostCommentWithPostVO> response = api.listLatestUsingGET1(top, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists post comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageByUsingGET5Test() {
        String keyword = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String status = null;
        //CustomizedPageOfPostCommentWithPostVO response = api.pageByUsingGET5(keyword, page, size, sort, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a post comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateByUsingPUT7Test() {
        Long commentId = null;
        PostCommentParam body = null;
        //BaseCommentDTO response = api.updateByUsingPUT7(commentId, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates post comment status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusByUsingPUT1Test() {
        Long commentId = null;
        String status = null;
        //BaseCommentDTO response = api.updateStatusByUsingPUT1(commentId, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates post comment status in batch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusInBatchUsingPUTTest() {
        String status = null;
        List<Long> body = null;
        //List<BaseCommentDTO> response = api.updateStatusInBatchUsingPUT(status, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
