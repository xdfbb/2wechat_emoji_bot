/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BaseCommentDTO;
import io.swagger.model.CustomizedPageOfBaseCommentVO;
import io.swagger.model.CustomizedPageOfBaseCommentWithParentVO;
import io.swagger.model.CustomizedPageOfSheetCommentWithSheetVO;
import io.swagger.model.SheetComment;
import io.swagger.model.SheetCommentParam;
import io.swagger.model.SheetCommentWithSheetVO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for SheetCommentControllerApi 
 */
public class SheetCommentControllerApiTest {


    private SheetCommentControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", SheetCommentControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Creates a sheet comment (new or reply)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createByUsingPOST8Test() {
        SheetCommentParam body = null;
        //BaseCommentDTO response = api.createByUsingPOST8(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes sheet comments permanently in batch by id array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyInBatchUsingDELETE4Test() {
        //List<SheetComment> response = api.deletePermanentlyInBatchUsingDELETE4();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes sheet comment permanently and recursively
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyUsingDELETE7Test() {
        Long commentId = null;
        //BaseCommentDTO response = api.deletePermanentlyUsingDELETE7(commentId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets a sheet comment by comment id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByUsingGET8Test() {
        Long commentId = null;
        //SheetCommentWithSheetVO response = api.getByUsingGET8(commentId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists sheet comments with tree view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentTreeUsingGET2Test() {
        Integer sheetId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentVO response = api.listCommentTreeUsingGET2(sheetId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists sheet comment with list view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentsUsingGET2Test() {
        Integer sheetId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentWithParentVO response = api.listCommentsUsingGET2(sheetId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists latest sheet comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLatestUsingGET2Test() {
        Integer top = null;
        String status = null;
        //List<SheetCommentWithSheetVO> response = api.listLatestUsingGET2(top, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists sheet comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageByUsingGET7Test() {
        String keyword = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String status = null;
        //CustomizedPageOfSheetCommentWithSheetVO response = api.pageByUsingGET7(keyword, page, size, sort, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a sheet comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateByUsingPUT9Test() {
        Long commentId = null;
        SheetCommentParam body = null;
        //BaseCommentDTO response = api.updateByUsingPUT9(commentId, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates sheet comment status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusByUsingPUT3Test() {
        Long commentId = null;
        String status = null;
        //BaseCommentDTO response = api.updateStatusByUsingPUT3(commentId, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates sheet comment status in batch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusInBatchUsingPUT2Test() {
        String status = null;
        List<Long> body = null;
        //List<BaseCommentDTO> response = api.updateStatusInBatchUsingPUT2(status, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
