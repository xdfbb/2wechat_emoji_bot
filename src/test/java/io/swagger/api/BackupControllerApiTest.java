/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BackupDTO;
import io.swagger.model.BasePostDetailDTO;
import java.io.File;
import io.swagger.model.PostMarkdownParam;
import io.swagger.model.Resource;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for BackupControllerApi 
 */
public class BackupControllerApiTest {


    private BackupControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", BackupControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Backups work directory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupHaloUsingPOSTTest() {
        List<String> body = null;
        //BackupDTO response = api.backupHaloUsingPOST(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Imports markdown
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupMarkdownsUsingPOSTTest() {
        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;
        //BasePostDetailDTO response = api.backupMarkdownsUsingPOST(file);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes a work directory backup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackupUsingDELETETest() {
        String filename = null;
        //api.deleteBackupUsingDELETE(filename);
        
        // TODO: test validations
        
        
    }
    /**
     * Deletes a exported data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExportedDataUsingDELETETest() {
        String filename = null;
        //api.deleteExportedDataUsingDELETE(filename);
        
        // TODO: test validations
        
        
    }
    /**
     * Deletes a markdown backup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMarkdownUsingDELETETest() {
        String filename = null;
        //api.deleteMarkdownUsingDELETE(filename);
        
        // TODO: test validations
        
        
    }
    /**
     * Downloads a work directory backup file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadBackupUsingGETTest() {
        String filename = null;
        //Resource response = api.downloadBackupUsingGET(filename);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Downloads a exported data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadExportedDataUsingGETTest() {
        String fileName = null;
        //Resource response = api.downloadExportedDataUsingGET(fileName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Downloads a work markdown backup file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadMarkdownUsingGETTest() {
        String fileName = null;
        //Resource response = api.downloadMarkdownUsingGET(fileName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Exports all data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportDataUsingPOSTTest() {
        //BackupDTO response = api.exportDataUsingPOST();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Exports markdowns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportMarkdownsUsingPOSTTest() {
        PostMarkdownParam body = null;
        //BackupDTO response = api.exportMarkdownsUsingPOST(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * getDataBackup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataBackupUsingGETTest() {
        String filename = null;
        //BackupDTO response = api.getDataBackupUsingGET(filename);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * getMarkdownBackup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMarkdownBackupUsingGETTest() {
        String filename = null;
        //BackupDTO response = api.getMarkdownBackupUsingGET(filename);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * getWorkDirBackup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkDirBackupUsingGETTest() {
        String filename = null;
        //BackupDTO response = api.getWorkDirBackupUsingGET(filename);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets items that can be backed up
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBackupItemsUsingGETTest() {
        //List<String> response = api.listBackupItemsUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets all work directory backups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBackupsUsingGETTest() {
        //List<BackupDTO> response = api.listBackupsUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists all exported data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExportedDataUsingGETTest() {
        //List<BackupDTO> response = api.listExportedDataUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets all markdown backups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMarkdownsUsingGETTest() {
        //List<BackupDTO> response = api.listMarkdownsUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
