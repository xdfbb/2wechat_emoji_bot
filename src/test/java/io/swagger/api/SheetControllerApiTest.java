/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BasePostDetailDTO;
import io.swagger.model.CustomizedPageOfSheetListVO;
import io.swagger.model.IndependentSheetDTO;
import io.swagger.model.PostContentParam;
import io.swagger.model.SheetDetailVO;
import io.swagger.model.SheetParam;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for SheetControllerApi 
 */
public class SheetControllerApiTest {


    private SheetControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", SheetControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Creates a sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createByUsingPOST9Test() {
        SheetParam body = null;
        Boolean autoSave = null;
        //SheetDetailVO response = api.createByUsingPOST9(body, autoSave);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes a sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByUsingDELETE3Test() {
        Integer sheetId = null;
        //SheetDetailVO response = api.deleteByUsingDELETE3(sheetId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets a sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByUsingGET9Test() {
        Integer sheetId = null;
        //SheetDetailVO response = api.getByUsingGET9(sheetId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists independent sheets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void independentSheetsUsingGETTest() {
        //List<IndependentSheetDTO> response = api.independentSheetsUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets a page of sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageByUsingGET8Test() {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        //CustomizedPageOfSheetListVO response = api.pageByUsingGET8(page, size, sort);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets a sheet preview link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void previewUsingGET2Test() {
        Integer sheetId = null;
        //String response = api.previewUsingGET2(sheetId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateByUsingPUT10Test() {
        Integer sheetId = null;
        SheetParam body = null;
        Boolean autoSave = null;
        //SheetDetailVO response = api.updateByUsingPUT10(sheetId, body, autoSave);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates draft
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDraftByUsingPUT1Test() {
        Integer sheetId = null;
        PostContentParam body = null;
        //BasePostDetailDTO response = api.updateDraftByUsingPUT1(sheetId, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusByUsingPUT4Test() {
        Integer sheetId = null;
        String status = null;
        //api.updateStatusByUsingPUT4(sheetId, status);
        
        // TODO: test validations
        
        
    }
}
