/**
 * Halo API Documentation
 * Documentation for Halo API
 * <p>
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import io.swagger.model.PostContentParam;
import io.swagger.model.PostDetailVO;
import io.swagger.model.PostParam;
import org.apache.cxf.ext.logging.LoggingFeature;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Before;
import org.junit.Test;

import java.util.AbstractList;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertNotNull;


/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 * <p>
 * API tests for PostControllerApi
 */
public class PostControllerApiTest {


    private PostControllerApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://jiaomao.solemountain.cn/", PostControllerApi.class, providers);

        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api)
                .accept("application/json").type("application/json")
                .header("Admin-Authorization", "eba5db828cb54ddfacf1c70ef9fa7958");
//        ClientConfiguration config = WebClient.getConfig(client);
    }

    /**
     * Creates a post
     */
    @Test
    public void createByUsingPOST7Test() {
        PostParam post = new PostParam();
        post.setTitle("title5");
        post.setContent("Content");
        post.setOriginalContent("originalContent");
        post.setStatus(PostParam.StatusEnum.PUBLISHED);
        post.setKeepRaw(true);

        List<Integer> categoryIds = new ArrayList<>();
        categoryIds.add(3);
        post.setCategoryIds(categoryIds);

        List<Integer> tagIds = new ArrayList<>();
        tagIds.add(1);
        post.setTagIds(tagIds);

        post.setSummary("summary");

        Boolean autoSave = null;
        PostDetailVO response = api.createByUsingPOST7(post, true);
        assertNotNull(response);

    }

    /**
     * Deletes posts permanently in batch by id array
     */
    @Test
    public void deletePermanentlyInBatchUsingDELETE3Test() {
        //List<Post> response = api.deletePermanentlyInBatchUsingDELETE3();
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Deletes a photo permanently
     */
    @Test
    public void deletePermanentlyUsingDELETE6Test() {
        Integer postId = null;
        //api.deletePermanentlyUsingDELETE6(postId);

        // TODO: test validations


    }

    /**
     * Gets a post
     */
    @Test
    public void getByUsingGET7Test() {
        Integer postId = null;
        //PostDetailVO response = api.getByUsingGET7(postId);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Likes a post
     */
    @Test
    public void likesUsingPUT1Test() {
        Integer postId = null;
        //api.likesUsingPUT1(postId);

        // TODO: test validations


    }

    /**
     * Gets a page of post by post status
     */
    @Test
    public void pageByStatusUsingGETTest() {
        String status = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        Boolean more = null;
        //CustomizedPageOfBasePostSimpleDTO response = api.pageByStatusUsingGET(status, page, size, sort, more);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Lists posts
     */
    @Test
    public void pageByUsingGET6Test() {
        Integer categoryId = null;
        String keyword = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String status = null;
        List<String> statuses = null;
        Boolean more = null;
        //CustomizedPageOfBasePostSimpleDTO response = api.pageByUsingGET6(categoryId, keyword, page, size, sort, status, statuses, more);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Pages latest post
     */
    @Test
    public void pageLatestUsingGET2Test() {
        Integer top = null;
        //List<BasePostMinimalDTO> response = api.pageLatestUsingGET2(top);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Gets a post preview link
     */
    @Test
    public void previewUsingGETTest() {
        Integer postId = null;
        //String response = api.previewUsingGET(postId);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Gets a post preview link
     */
    @Test
    public void previewUsingGET1Test() {
        Integer postId = null;
        //String response = api.previewUsingGET1(postId);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Updates a post
     */
    @Test
    public void updateByUsingPUT8Test() {
        Integer postId = null;
        PostParam body = null;
        Boolean autoSave = null;
        //PostDetailVO response = api.updateByUsingPUT8(postId, body, autoSave);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Updates draft
     */
    @Test
    public void updateDraftByUsingPUTTest() {
        Integer postId = null;
        PostContentParam body = null;
        //BasePostDetailDTO response = api.updateDraftByUsingPUT(postId, body);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Updates post status
     */
    @Test
    public void updateStatusByUsingPUT2Test() {
        Integer postId = null;
        String status = null;
        //BasePostMinimalDTO response = api.updateStatusByUsingPUT2(postId, status);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Updates post status in batch
     */
    @Test
    public void updateStatusInBatchUsingPUT1Test() {
        String status = null;
        List<Integer> body = null;
        //List<Post> response = api.updateStatusInBatchUsingPUT1(status, body);
        //assertNotNull(response);
        // TODO: test validations


    }
}
