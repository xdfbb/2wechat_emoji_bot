/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BaseResponseOfboolean;
import io.swagger.model.BaseResponseOfobject;
import io.swagger.model.BaseResponseOfstring;
import java.io.File;
import io.swagger.model.Group;
import io.swagger.model.Item;
import io.swagger.model.ThemeContentParam;
import io.swagger.model.ThemeFile;
import io.swagger.model.ThemeProperty;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for ThemeControllerApi 
 */
public class ThemeControllerApiTest {


    private ThemeControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", ThemeControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Activates a theme
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activeUsingPOSTTest() {
        String themeId = null;
        //ThemeProperty response = api.activeUsingPOST(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets custom post templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customPostTemplateUsingGETTest() {
        //List<String> response = api.customPostTemplateUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets custom sheet templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customSheetTemplateUsingGETTest() {
        //List<String> response = api.customSheetTemplateUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes a theme
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByUsingDELETE4Test() {
        String themeId = null;
        Boolean deleteSettings = null;
        //api.deleteByUsingDELETE4(themeId, deleteSettings);
        
        // TODO: test validations
        
        
    }
    /**
     * Determines if template exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsUsingGETTest() {
        String template = null;
        //BaseResponseOfboolean response = api.existsUsingGET(template);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Fetches theme configuration by theme id and group name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchConfigByGroupUsingGETTest() {
        String themeId = null;
        String group = null;
        //List<Item> response = api.fetchConfigByGroupUsingGET(themeId, group);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Fetches theme configuration group names by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchConfigGroupsUsingGETTest() {
        String themeId = null;
        //List<String> response = api.fetchConfigGroupsUsingGET(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Fetches theme configuration by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchConfigUsingGETTest() {
        String themeId = null;
        //List<Group> response = api.fetchConfigUsingGET(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Fetches activated theme configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchConfigUsingGET1Test() {
        //BaseResponseOfobject response = api.fetchConfigUsingGET1();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Fetches a new theme
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchThemeUsingPOSTTest() {
        String uri = null;
        //ThemeProperty response = api.fetchThemeUsingPOST(uri);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets activate theme
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivateThemeUsingGETTest() {
        //ThemeProperty response = api.getActivateThemeUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets theme property by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByUsingGET11Test() {
        String themeId = null;
        //ThemeProperty response = api.getByUsingGET11(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets template content by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContentByUsingGETTest() {
        String themeId = null;
        String path = null;
        //BaseResponseOfstring response = api.getContentByUsingGET(themeId, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Gets template content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContentByUsingGET1Test() {
        String path = null;
        //BaseResponseOfstring response = api.getContentByUsingGET1(path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists all themes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllUsingGET3Test() {
        //List<ThemeProperty> response = api.listAllUsingGET3();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists all activate theme files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFilesUsingGETTest() {
        //List<ThemeFile> response = api.listFilesUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists theme files by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFilesUsingGET1Test() {
        String themeId = null;
        //List<ThemeFile> response = api.listFilesUsingGET1(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists activated theme settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsByUsingGETTest() {
        //Object response = api.listSettingsByUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists theme settings by theme id and group name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsByUsingGET1Test() {
        String themeId = null;
        String group = null;
        //Object response = api.listSettingsByUsingGET1(themeId, group);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists theme settings by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsByUsingGET2Test() {
        String themeId = null;
        //Object response = api.listSettingsByUsingGET2(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Reloads themes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reloadUsingPOSTTest() {
        //api.reloadUsingPOST();
        
        // TODO: test validations
        
        
    }
    /**
     * Saves theme settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSettingsByUsingPOSTTest() {
        String themeId = null;
        Object body = null;
        //api.saveSettingsByUsingPOST(themeId, body);
        
        // TODO: test validations
        
        
    }
    /**
     * Saves theme settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSettingsByUsingPOST1Test() {
        Object body = null;
        //api.saveSettingsByUsingPOST1(body);
        
        // TODO: test validations
        
        
    }
    /**
     * Updates template content by theme id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContentByUsingPUTTest() {
        String themeId = null;
        ThemeContentParam body = null;
        //api.updateContentByUsingPUT(themeId, body);
        
        // TODO: test validations
        
        
    }
    /**
     * Updates template content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContentByUsingPUT1Test() {
        ThemeContentParam body = null;
        //api.updateContentByUsingPUT1(body);
        
        // TODO: test validations
        
        
    }
    /**
     * Upgrades theme from remote
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateThemeByFetchingUsingPUTTest() {
        String themeId = null;
        //ThemeProperty response = api.updateThemeByFetchingUsingPUT(themeId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Upgrades theme by file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateThemeByUploadUsingPUTTest() {
        String themeId = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;
        //ThemeProperty response = api.updateThemeByUploadUsingPUT(themeId, file);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Uploads a theme
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadThemeUsingPOSTTest() {
        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;
        //ThemeProperty response = api.uploadThemeUsingPOST(file);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
