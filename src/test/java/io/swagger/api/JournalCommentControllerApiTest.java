/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.BaseCommentDTO;
import io.swagger.model.CustomizedPageOfBaseCommentVO;
import io.swagger.model.CustomizedPageOfBaseCommentWithParentVO;
import io.swagger.model.CustomizedPageOfJournalCommentWithJournalVO;
import io.swagger.model.JournalCommentParam;
import io.swagger.model.JournalCommentWithJournalVO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for JournalCommentControllerApi 
 */
public class JournalCommentControllerApiTest {


    private JournalCommentControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", JournalCommentControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Creates a journal comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentByUsingPOSTTest() {
        JournalCommentParam body = null;
        //BaseCommentDTO response = api.createCommentByUsingPOST(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes comment permanently and recursively
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteByUsingDELETETest() {
        Long commentId = null;
        //BaseCommentDTO response = api.deleteByUsingDELETE(commentId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists comments with tree view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentTreeUsingGETTest() {
        Integer journalId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentVO response = api.listCommentTreeUsingGET(journalId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists comment with list view
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentsUsingGETTest() {
        Integer journalId = null;
        List<String> sort = null;
        Integer page = null;
        //CustomizedPageOfBaseCommentWithParentVO response = api.listCommentsUsingGET(journalId, sort, page);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists latest journal comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLatestUsingGETTest() {
        Integer top = null;
        String status = null;
        //List<JournalCommentWithJournalVO> response = api.listLatestUsingGET(top, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists journal comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageByUsingGET1Test() {
        String keyword = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String status = null;
        //CustomizedPageOfJournalCommentWithJournalVO response = api.pageByUsingGET1(keyword, page, size, sort, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a journal comment by comment id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommentByUsingPUTTest() {
        Long commentId = null;
        JournalCommentParam body = null;
        //BaseCommentDTO response = api.updateCommentByUsingPUT(commentId, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates comment status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStatusByUsingPUTTest() {
        Long commentId = null;
        String status = null;
        //BaseCommentDTO response = api.updateStatusByUsingPUT(commentId, status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
