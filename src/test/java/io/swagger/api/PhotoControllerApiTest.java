/**
 * Halo API Documentation
 * Documentation for Halo API
 *
 * OpenAPI spec version: 1.5.1
 * Contact: hi@halo.run
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.CustomizedPageOfPhotoDTO;
import io.swagger.model.PhotoDTO;
import io.swagger.model.PhotoParam;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Halo API Documentation
 *
 * <p>Documentation for Halo API
 *
 * API tests for PhotoControllerApi 
 */
public class PhotoControllerApiTest {


    private PhotoControllerApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8090", PhotoControllerApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Batch creation photos
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBatchByUsingPOST1Test() {
        List<PhotoParam> body = null;
        //List<PhotoDTO> response = api.createBatchByUsingPOST1(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Creates a photo
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createByUsingPOST5Test() {
        PhotoParam body = null;
        //PhotoDTO response = api.createByUsingPOST5(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes photos permanently in batch by id array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyInBatchUsingDELETE1Test() {
        //List<PhotoDTO> response = api.deletePermanentlyInBatchUsingDELETE1();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Deletes photo by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermanentlyUsingDELETE4Test() {
        Integer photoId = null;
        //api.deletePermanentlyUsingDELETE4(photoId);
        
        // TODO: test validations
        
        
    }
    /**
     * Gets photo detail by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByUsingGET5Test() {
        Integer photoId = null;
        //PhotoDTO response = api.getByUsingGET5(photoId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Likes a photo
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likesUsingPUTTest() {
        Integer photoId = null;
        //api.likesUsingPUT(photoId);
        
        // TODO: test validations
        
        
    }
    /**
     * Lists latest photos
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPhotosUsingGETTest() {
        List<String> sort = null;
        //List<PhotoDTO> response = api.listPhotosUsingGET(sort);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists all of photo teams
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTeamsUsingGETTest() {
        //List<String> response = api.listTeamsUsingGET();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Lists photos
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pageByUsingGET4Test() {
        String keyword = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String team = null;
        //CustomizedPageOfPhotoDTO response = api.pageByUsingGET4(keyword, page, size, sort, team);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates photo in batch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBatchByUsingPUT2Test() {
        List<PhotoParam> body = null;
        //List<PhotoDTO> response = api.updateBatchByUsingPUT2(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Updates a photo
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateByUsingPUT6Test() {
        Integer photoId = null;
        PhotoParam body = null;
        //PhotoDTO response = api.updateByUsingPUT6(photoId, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
